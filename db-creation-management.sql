--4

CREATE TABLE SECTII_MEDICALE (
    ID_SECTIE_M VARCHAR2(20) PRIMARY KEY,
    NUME_SECTIE VARCHAR2(100),
    NR_PATURI NUMBER(4),
    NR_PATURI_LIBERE NUMBER(4)
);

CREATE TABLE PACIENTI (
    ID_PACIENT NUMBER(4) PRIMARY KEY,
    CNP NUMBER(13),
    NUME VARCHAR2(100),
    PRENUME VARCHAR2(100),
    ASIGURARE_MEDICALA VARCHAR2(20)
);

CREATE TABLE INTERNARI (
    ID_PACIENT NUMBER(4),
    ID_SECTIE_M VARCHAR2(20),
    DATA_INTERNARE DATE,
    CONSTRAINT ID_INTERNARE PRIMARY KEY (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE),
    CONSTRAINT FK_ID_PACIENT FOREIGN KEY (ID_PACIENT)
        REFERENCES PACIENTI(ID_PACIENT),
    CONSTRAINT FK_ID_SECTIE_M FOREIGN KEY (ID_SECTIE_M)
        REFERENCES SECTII_MEDICALE(ID_SECTIE_M)
);

CREATE TABLE ISTORIC_MEDICAL (
    ID_PACIENT NUMBER(4),
    ID_ISTORIC NUMBER(4) PRIMARY KEY,
    PATOLOGII VARCHAR2(100),
    CONTRAINDICATII VARCHAR2(100),
    CONSTRAINT FK_ID_PACIENT1 FOREIGN KEY (ID_PACIENT)
        REFERENCES PACIENTI(ID_PACIENT)
);

CREATE TABLE MEDICI (
    ID_MEDIC NUMBER(4) PRIMARY KEY,
    NUME VARCHAR2(100),
    PRENUME VARCHAR2(100),
    SALARIU NUMBER(10),
    MEDIC_SEF VARCHAR(100),
    ID_SECTIE_M VARCHAR2(20),
    CONSTRAINT FK_ID_SECTIE_M1 FOREIGN KEY (ID_SECTIE_M)
        REFERENCES SECTII_MEDICALE(ID_SECTIE_M)
);

CREATE TABLE ISTORIC_SALARIU (
    ID_ISTORIC_SAL NUMBER(4) PRIMARY KEY,
    ID_MEDIC NUMBER(4),
    SALARIU_VECHI NUMBER(10),
    SALARIU_NOU NUMBER(10),
    DATA_ACTUALIZARE DATE,
    CONSTRAINT FK_ID_SAL_M1 FOREIGN KEY (ID_MEDIC)
        REFERENCES MEDICI(ID_MEDIC)
);

CREATE TABLE CONSULTATII (
    data_cons DATE,
    ID_MEDIC NUMBER(4),
    ID_PACIENT NUMBER(4),
    CONSTRAINT ID_CONSULTATIE_P PRIMARY KEY (ID_PACIENT, ID_MEDIC, data_cons),
    CONSTRAINT FK_ID_PACIENT2 FOREIGN KEY (ID_PACIENT)
        REFERENCES PACIENTI(ID_PACIENT),
    CONSTRAINT FK_ID_MEDIC FOREIGN KEY (ID_MEDIC)
        REFERENCES MEDICI(ID_MEDIC)
);

CREATE TABLE CATEGORIE (
    ID_CATEGORIE VARCHAR2(100) PRIMARY KEY,
    ECHIPAMENT VARCHAR2(100)
);

CREATE TABLE TRATAMENTE (
    ID_TRATAMENT NUMBER(4) PRIMARY KEY,
    data_cons DATE,
    ID_CATEGORIE VARCHAR2(100),
    DURATA VARCHAR2(20),
    DESCRIERE VARCHAR2(150),
    RECOMANDARI VARCHAR2(150),
    ID_MEDIC NUMBER(4),
    ID_PACIENT NUMBER(4),
    CONSTRAINT FK_ID_CONSULTATIE112 FOREIGN KEY (data_cons, ID_PACIENT, ID_MEDIC)
        REFERENCES CONSULTATII(data_cons, ID_PACIENT, ID_MEDIC),
    CONSTRAINT FK_ID_CATEGORIE112 FOREIGN KEY (ID_CATEGORIE)
        REFERENCES CATEGORIE(ID_CATEGORIE)
);

CREATE TABLE MEDICAMENTE (
    ID_MEDICAMENT VARCHAR2(20) PRIMARY KEY,
    NUME VARCHAR2(100), 
    PRET NUMBER(10)
);

CREATE TABLE TRATAMENTE_CONTIN_MEDICAMENTE (
    ID_TRATAMENT NUMBER(4),
    ID_MEDICAMENT VARCHAR2(20),
    DOZA VARCHAR2(100),
    INDICATII VARCHAR2(100),
    CONSTRAINT FK_ID_TRATAMENT FOREIGN KEY (ID_TRATAMENT)
        REFERENCES TRATAMENTE(ID_TRATAMENT),
    CONSTRAINT FK_IID_MEDICAMENT FOREIGN KEY (ID_MEDICAMENT)
        REFERENCES MEDICAMENTE(ID_MEDICAMENT),
    CONSTRAINT ID_MEDICAMENT_TR PRIMARY KEY (ID_TRATAMENT, ID_MEDICAMENT)
);

CREATE TABLE SECTOARE (
    ID_SECTOR VARCHAR2(20) PRIMARY KEY,
    NUME VARCHAR2(20)
);

CREATE TABLE ZONE (
    ID_ZONA VARCHAR2(20) PRIMARY KEY,
    ID_SECTOR VARCHAR2(20),
    CONSTRAINT FK_ID_SECTOR FOREIGN KEY (ID_SECTOR)
        REFERENCES SECTOARE(ID_SECTOR)
);

CREATE TABLE SPITAL (
    ID_SPITAL VARCHAR2(20) PRIMARY KEY,
    NUME_SPITAL VARCHAR2(100), 
    COD_POSTAL VARCHAR2(20),
    ID_ZONA VARCHAR2(20),
    CONSTRAINT FK_ID_ZONA FOREIGN KEY (ID_ZONA)
        REFERENCES ZONE(ID_ZONA)
);

CREATE TABLE MEDIC_LUCREAZA_IN_SPITAL (
    ID_MEDIC NUMBER(4),
    ID_SPITAL VARCHAR2(20),
    DATA_ANGAJARII DATE,
    CONSTRAINT FK_ID_SPITAL FOREIGN KEY (ID_SPITAL)
        REFERENCES SPITAL(ID_SPITAL),
    CONSTRAINT FK_ID_MEDIC1 FOREIGN KEY (ID_MEDIC)
        REFERENCES MEDICI(ID_MEDIC),
    CONSTRAINT ID_MEDIC_LUCREAZA_IN_SPITAL PRIMARY KEY (ID_MEDIC, ID_SPITAL)
);

--COMMIT;


--INSERARI

INSERT INTO SECTII_MEDICALE (ID_SECTIE_M, NUME_SECTIE, NR_PATURI, NR_PATURI_LIBERE)
VALUES ('SEC1', 'Chirurgie', 30, 25);

INSERT INTO SECTII_MEDICALE (ID_SECTIE_M, NUME_SECTIE, NR_PATURI, NR_PATURI_LIBERE)
VALUES ('SEC2', 'Cardiologie', 25, 20);

INSERT INTO SECTII_MEDICALE (ID_SECTIE_M, NUME_SECTIE, NR_PATURI, NR_PATURI_LIBERE)
VALUES ('SEC3', 'Pediatrie', 40, 35);

INSERT INTO SECTII_MEDICALE (ID_SECTIE_M, NUME_SECTIE, NR_PATURI, NR_PATURI_LIBERE)
VALUES ('SEC4', 'Ortopedie', 20, 1);

INSERT INTO SECTII_MEDICALE (ID_SECTIE_M, NUME_SECTIE, NR_PATURI, NR_PATURI_LIBERE)
VALUES ('SEC5', 'Neurologie', 15, 10);

INSERT INTO SECTII_MEDICALE (ID_SECTIE_M, NUME_SECTIE, NR_PATURI, NR_PATURI_LIBERE)
VALUES ('SEC6', 'Oftalmologie', 18, 10);


--Inserare Pacienti
INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (1, 1234567890123, 'Popescu', 'Ana', 'Da');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (2, 2345678901234, 'Ionescu', 'Mihai', 'Nu');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (3, 3456789012345, 'Dumitrescu', 'Maria', 'Da');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (4, 4567890123456, 'Georgescu', 'Ion', 'Nu');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (5, 5678901234567, 'Constantinescu', 'Elena', 'Da');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (6, 6789012345678, 'Radulescu', 'Andrei', 'Nu');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (7, 7890123456789, 'Mihai', 'Ana-Maria', 'Da');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (8, 8901234567890, 'Stoica', 'Gabriel', 'Nu');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (9, 9012345678901, 'Popa', 'Cristina', 'Da');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (10, 1234509876543, 'Marinescu', 'Alexandru', 'Nu');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (11, 2345098765432, 'Florescu', 'Andreea', 'Da');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (12, 3450987654321, 'Dobre', 'George', 'Nu');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (13, 4509876543210, 'Neagu', 'Raluca', 'Da');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (14, 5098765432109, 'Ionita', 'Robert', 'Nu');

INSERT INTO PACIENTI (ID_PACIENT, CNP, NUME, PRENUME, ASIGURARE_MEDICALA)
VALUES (15, 5987654321098, 'Gheorghe', 'Ioana', 'Da');

--Inserare INTERNARI
-- Inserare a 15 înregistrări în tabelul INTERNARI folosind datele din tabela PACIENTI
INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (1, 'SEC1', TO_DATE('2023-11-01', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (2, 'SEC3', TO_DATE('2023-10-15', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (3, 'SEC2', TO_DATE('2023-10-20', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (4, 'SEC5', TO_DATE('2023-11-10', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (5, 'SEC4', TO_DATE('2023-09-25', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (6, 'SEC1', TO_DATE('2023-08-18', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (7, 'SEC3', TO_DATE('2023-08-22', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (8, 'SEC2', TO_DATE('2023-09-05', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (9, 'SEC4', TO_DATE('2023-10-03', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (10, 'SEC5', TO_DATE('2023-11-22', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (11, 'SEC1', TO_DATE('2023-11-12', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (12, 'SEC3', TO_DATE('2023-09-30', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (13, 'SEC2', TO_DATE('2023-10-10', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (14, 'SEC4', TO_DATE('2023-08-29', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (15, 'SEC5', TO_DATE('2023-09-15', 'YYYY-MM-DD'));

-- Inserare tabela Istoric Medical
INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (1, 101, 'Hipertensiune', 'Alergie la penicilină');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (2, 102, 'Diabet', 'Intoleranță la antiinflamatoare');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (3, 103, 'Astm', 'Alergie la aspirină');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (4, 104, 'Insuficiență cardiacă', 'Alergie la sulfați');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (5, 105, 'Osteoporoză', 'Intoleranță la anumite antibiotice');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (6, 106, 'Ulcer', NULL);

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (7, 107, 'Ulcer', 'Intoleranță la lactoză');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (8, 108, 'Anemie', NULL);

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (9, 109, 'Artrită', 'Intoleranță la gluten');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (10, 110, 'Anemie', 'Alergie la aspirină');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (11, 111, 'Colesterol crescut', NULL);

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (12, 112, 'Probleme tiroidiene', NULL);

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (13, 113, 'Fibroză chistică', 'Intoleranță la cafeină');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (14, 114, 'Colesterol crescut', 'Intoleranță la sulfiti');

INSERT INTO ISTORIC_MEDICAL (ID_PACIENT, ID_ISTORIC, PATOLOGII, CONTRAINDICATII)
VALUES (15, 115, 'Migrene', 'Intoleranță la sulfiti');



-- Inserari Medici

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (1, 'Popescu', 'Andrei', 8000, 'Dr. Ionescu', 'SEC1');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (2, 'Ionescu', 'Maria', 7500, NULL, 'SEC2');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (3, 'Dumitrescu', 'Mihai', 8200, NULL, 'SEC3');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (4, 'Georgescu', 'Elena', 7800, 'Dr. Popescu', 'SEC4');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (5, 'Constantinescu', 'Vlad', 7900, NULL, 'SEC5');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (6, 'Radulescu', 'Ana', 8200, 'Dr. Ionescu', 'SEC1');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (7, 'Mihai', 'Alexandru', 7700, NULL, 'SEC2');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (8, 'Stoica', 'Raluca', 8100, NULL, 'SEC3');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (9, 'Popa', 'George', 7900, 'Dr. Georgescu', 'SEC4');

INSERT INTO MEDICI (ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M)
VALUES (10, 'Marinescu', 'Ioana', 7800, NULL, 'SEC5');

-- istoric medici
INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (1, 1, 1000, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 1), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 1);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (2, 2, 1200, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 2), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 2);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (3, 3, 1500, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 3), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 3);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (4, 4, 1000, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 4), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 4);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (5, 5, 2000, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 5), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 5);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (6, 6, 1000, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 6), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 6);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (7, 7, 1250, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 7), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 7);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (8, 8, 1500, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 8), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 8);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (9, 9, 1500, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 9), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 9);

INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
VALUES (10, 10, 1500, (SELECT SALARIU FROM MEDICI WHERE ID_MEDIC = 10), TO_DATE('2018-01-01', 'YYYY-MM-DD') + 10);

--iNSERARE CONSULTATII
INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-11-18', 'YYYY-MM-DD'), 1, 1);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-11-18', 'YYYY-MM-DD'), 3, 2);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 1, 1);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 3, 2);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 2, 3);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 5, 4);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 4, 5);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 6, 6);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 8, 7);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 7, 8);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 9, 9);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-18', 'YYYY-MM-DD'), 5, 10);

INSERT INTO CONSULTATII (data_cons, ID_MEDIC, ID_PACIENT)
VALUES (TO_DATE('2023-12-19', 'YYYY-MM-DD'), 5, 10);
select * from consultatii;

--Inserare Categorii
INSERT INTO CATEGORIE (ID_CATEGORIE, ECHIPAMENT)
VALUES ('Medicamentos', 'Medicamente');

INSERT INTO CATEGORIE (ID_CATEGORIE, ECHIPAMENT)
VALUES ('Chirurgicale', 'Instrumente chirurgicale, materiale sterile, echipamente de monitorizare post-operatorie');

INSERT INTO CATEGORIE (ID_CATEGORIE, ECHIPAMENT)
VALUES ('Ortopedice', 'Dispozitive ortopedice, proteze, aparate ortopedice specifice');

INSERT INTO CATEGORIE (ID_CATEGORIE, ECHIPAMENT)
VALUES ('FIZIOTERAPIE', 'Mese de masaj, role de masaj, aparate de electroterapie, aparate cu ultrasunet');

INSERT INTO CATEGORIE (ID_CATEGORIE, ECHIPAMENT)
VALUES ('PSIHOTERAPIE', 'Scaune și mobilier de consiliere');


-- Inserare Tratamente
INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (1, TO_DATE('2023-11-18', 'YYYY-MM-DD'), 'Chirurgicale', '7 zile', 'Intervenție chirurgicală', 'Repaus post-operator', 1, 1);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (2, TO_DATE('2023-11-18', 'YYYY-MM-DD'), 'Medicamentos', '20 zile', 'Tratament antibiotice', 'Repaus și hidratare', 3, 2);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (3, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'Medicamentos', '30 zile', 'Tratament curativ pentru dilatarea vaselor sangvine', 'Repaus și hidratare', 2, 3);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (4, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'FIZIOTERAPIE', '2 luni', 'Sesiuni de fizioterapie', 'Exerciții specifice', 4, 5);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (5, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'PSIHOTERAPIE', '3 luni', 'Sesiuni de consiliere psihologica', 'Repaus și îngrijire', 5, 4);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (6, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'Chirurgicale', '21 zile', 'Intervenție chirurgicală', 'Repaus post-operator', 6, 6);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (7, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'Ortopedice', '3 luni', 'Masaj', 'Urmărire periodică', 8, 7);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (8, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'Medicamentos', '14 zile', 'Tratament curativ cardiovascular', 'Repaus și monitorizare', 7, 8);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (9, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'Ortopedice', '30 zile', 'Masaj si medicamente', 'Repaus și monitorizare', 9, 9);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (10, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'PSIHOTERAPIE', '3 luni', 'Sesiuni complexe de PSIHOTERAPIE', null, 5, 10);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (11, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'PSIHOTERAPIE', '1 luna', 'Tratament cu antidepresive', null, 5, 10);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (12, TO_DATE('2023-12-18', 'YYYY-MM-DD'), 'Medicamentos', '20 zile', 'Recuperare', 'Repaus și hidratare', 3, 2);

INSERT INTO TRATAMENTE (ID_TRATAMENT, data_cons, ID_CATEGORIE, DURATA, DESCRIERE, RECOMANDARI, ID_MEDIC, ID_PACIENT)
VALUES (13, TO_DATE('2023-12-19', 'YYYY-MM-DD'), 'Medicamentos', '20 zile', 'Recuperare', 'Repaus și hidratare', 5, 10);


select * from tratamente;
--Inserare Medicamente
INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED1', 'Paracetamol', 10.50);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED2', 'Ibuprofen', 15.75);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED3', 'Amoxicilină', 20.20);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED4', 'Aspirină', 8.30);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED5', 'Claritromicină', 30.00);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED6', 'Omeprazol', 12.60);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED7', 'Diclofenac', 18.90);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED8', 'Ranitidină', 22.40);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED9', 'Furosemid', 25.80);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED10', 'Atorvastatin', 28.00);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED11', 'Metformin', 17.30);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED12', 'Losartan', 21.50);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED13', 'Amlodipină', 19.70);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED14', 'Levotiroxină', 16.90);

INSERT INTO MEDICAMENTE (ID_MEDICAMENT, NUME, PRET)
VALUES ('MED15', 'Tramadol', 24.90);

-- inserare tabela TRATAMENTE_CONTIN_MEDICAMENTE
INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (1, 'MED1', '500mg', 'O dată pe zi, după masă');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (1, 'MED3', '750mg', 'De două ori pe zi');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (2, 'MED5', '250mg', 'Dimineața și seara');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (2, 'MED7', '100mg', 'La nevoie, pentru durere');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (3, 'MED9', '40mg', 'O dată pe zi, dimineața');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (3, 'MED11', '500mg', 'După fiecare masă');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (4, 'MED13', '10mg', 'O dată pe zi, seara');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (4, 'MED15', '50mg', 'La nevoie, pentru durere moderată');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (5, 'MED2', '400mg', 'De trei ori pe zi, după mese');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (5, 'MED4', '1000mg', 'Dimineața și seara');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (8, 'MED10', '20mg', 'O dată pe zi, seara');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (8, 'MED15', '20mg', 'O dată pe zi, seara');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (8, 'MED12', '50mg', 'Dimineața și seara');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (3, 'MED6', '10mg', 'După fiecare masă');

INSERT INTO TRATAMENTE_CONTIN_MEDICAMENTE (ID_TRATAMENT, ID_MEDICAMENT, DOZA, INDICATII)
VALUES (3, 'MED10', '30mg', 'După fiecare masă');

-- Inserare în tabela SECTOARE
INSERT INTO SECTOARE (ID_SECTOR, NUME)
VALUES ('SECTOR1', 'Sector 1');

INSERT INTO SECTOARE (ID_SECTOR, NUME)
VALUES ('SECTOR2', 'Sector 2');

INSERT INTO SECTOARE (ID_SECTOR, NUME)
VALUES ('SECTOR3', 'Sector 3');

INSERT INTO SECTOARE (ID_SECTOR, NUME)
VALUES ('SECTOR4', 'Sector 4');

INSERT INTO SECTOARE (ID_SECTOR, NUME)
VALUES ('SECTOR5', 'Sector 5');

-- Inserare în tabela ZONE
INSERT INTO ZONE (ID_ZONA, ID_SECTOR)
VALUES ('ZONA1', 'SECTOR1');

INSERT INTO ZONE (ID_ZONA, ID_SECTOR)
VALUES ('ZONA2-1', 'SECTOR1');

INSERT INTO ZONE (ID_ZONA, ID_SECTOR)
VALUES ('ZONA2', 'SECTOR2');

INSERT INTO ZONE (ID_ZONA, ID_SECTOR)
VALUES ('ZONA3', 'SECTOR3');

INSERT INTO ZONE (ID_ZONA, ID_SECTOR)
VALUES ('ZONA4', 'SECTOR4');

INSERT INTO ZONE (ID_ZONA, ID_SECTOR)
VALUES ('ZONA5', 'SECTOR5');

-- Inserare în tabela SPITAL
INSERT INTO SPITAL (ID_SPITAL, NUME_SPITAL, COD_POSTAL, ID_ZONA)
VALUES ('SPITAL1', 'Spitalul Clinic de Urgență Floreasca', '014461', 'ZONA1');

INSERT INTO SPITAL (ID_SPITAL, NUME_SPITAL, COD_POSTAL, ID_ZONA)
VALUES ('SPITAL6', 'Spitalul Clinic de Urgență Floreasca 2', '014461', 'ZONA2-1');

INSERT INTO SPITAL (ID_SPITAL, NUME_SPITAL, COD_POSTAL, ID_ZONA)
VALUES ('SPITAL2', 'Spitalul Clinic de Urgență Bucur', '021012', 'ZONA2');

INSERT INTO SPITAL (ID_SPITAL, NUME_SPITAL, COD_POSTAL, ID_ZONA)
VALUES ('SPITAL3', 'Spitalul Universitar de Urgență Elias', '030475', 'ZONA3');

INSERT INTO SPITAL (ID_SPITAL, NUME_SPITAL, COD_POSTAL, ID_ZONA)
VALUES ('SPITAL4', 'Spitalul Militar Central', '041441', 'ZONA4');

INSERT INTO SPITAL (ID_SPITAL, NUME_SPITAL, COD_POSTAL, ID_ZONA)
VALUES ('SPITAL5', 'Spitalul Clinic de Urgență Sfântul Ioan', '050098', 'ZONA5');

--Inserarea MEDICI_LUCREAZA_IN_SPITALE

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (1, 'SPITAL1', TO_DATE('2023-01-15', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (2, 'SPITAL2', TO_DATE('2022-11-20', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (3, 'SPITAL3', TO_DATE('2023-03-10', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (4, 'SPITAL4', TO_DATE('2022-09-05', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (5, 'SPITAL5', TO_DATE('2022-08-18', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (6, 'SPITAL1', TO_DATE('2021-02-28', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (7, 'SPITAL2', TO_DATE('2021-01-03', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (7, 'SPITAL1', TO_DATE('2021-01-06', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (8, 'SPITAL3', TO_DATE('2021-04-12', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (8, 'SPITAL4', TO_DATE('2021-06-12', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (9, 'SPITAL4', TO_DATE('2021-06-20', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (10, 'SPITAL5', TO_DATE('2023-05-07', 'YYYY-MM-DD'));

INSERT INTO MEDIC_LUCREAZA_IN_SPITAL (ID_MEDIC, ID_SPITAL, DATA_ANGAJARII)
VALUES (10, 'SPITAL4', TO_DATE('2022-05-07', 'YYYY-MM-DD'));

COMMIT;

--6

CREATE OR REPLACE PROCEDURE evaluare_medici IS
    TYPE tablou_idx IS TABLE OF medici%ROWTYPE INDEX BY BINARY_INTEGER;
    TYPE tablou_imbr IS TABLE OF pacienti%ROWTYPE;
    TYPE vector IS VARRAY(3) OF consultatii%ROWTYPE;

    med tablou_idx;
    pacienti_med tablou_imbr := tablou_imbr();
    cons_med vector := vector();
BEGIN
    -- Salvare in tablou
    SELECT ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M 
    BULK COLLECT INTO med
    FROM (
    SELECT COUNT(*) AS NR_CONS, M.ID_MEDIC, M.NUME, M.PRENUME, M.SALARIU, M.MEDIC_SEF, M.ID_SECTIE_M  FROM MEDICI M
        INNER JOIN CONSULTATII C ON C.ID_MEDIC = M.ID_MEDIC
        GROUP BY M.ID_MEDIC, M.ID_MEDIC, M.NUME, M.PRENUME, M.SALARIU, M.MEDIC_SEF, M.ID_SECTIE_M 
        ORDER BY NR_CONS ASC) T
    WHERE ROWNUM <= 3;

    FOR i IN 1..med.COUNT LOOP
        -- Pentru pacienti
        FOR patient_rec IN (
            SELECT pa.* 
            FROM pacienti pa
            INNER JOIN consultatii c ON c.id_pacient = pa.id_pacient
            WHERE c.id_medic = med(i).id_medic
        ) LOOP
            pacienti_med.extend;
            pacienti_med(pacienti_med.last) := patient_rec;
        END LOOP;

        -- Pentru consultatii
        FOR cons_rec IN (
            SELECT * 
            FROM consultatii
            WHERE id_medic = med(i).id_medic
        ) LOOP
            cons_med.extend;
            cons_med(cons_med.last) := cons_rec;
        END LOOP;
    END LOOP;

    -- Afisare medici
    FOR k IN 1..med.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Id medic: ' || med(k).id_medic || ' ' || med(k).nume || ' ' || med(k).prenume);
        DBMS_OUTPUT.PUT_LINE('Consultatii:');
        
        -- Afisare consultatii pentru fiecare medic
        FOR j IN 1..cons_med.COUNT LOOP
            IF cons_med(j).id_medic = med(k).id_medic THEN
                DBMS_OUTPUT.PUT_LINE('Data consultatie: ' || cons_med(j).data_cons || ' ');
                
                -- Afisare pacienti pentru fiecare consultatie
                DBMS_OUTPUT.PUT_LINE('Pacient: ');
                FOR i IN 1..pacienti_med.COUNT LOOP
                    IF cons_med(j).id_pacient = pacienti_med(i).id_pacient THEN
                        DBMS_OUTPUT.PUT_LINE(pacienti_med(i).nume || ' ' || pacienti_med(i).prenume);
                    END IF;
                END LOOP;
                
            END IF;
        END LOOP;
        DBMS_OUTPUT.NEW_LINE;
    END LOOP;
END;
/

BEGIN
    evaluare_medici;
END;
/
--------------------------
--7

CREATE OR REPLACE PROCEDURE afiseaza_pacienti_cu_med_scumpe IS
   CURSOR tratament IS
        SELECT DISTINCT ID_PACIENT
        FROM (
            SELECT t.id_pacient, m.pret
            FROM tratamente t
            JOIN tratamente_contin_medicamente tcm ON t.id_tratament = tcm.id_tratament
            JOIN medicamente m ON m.id_medicament = tcm.id_medicament
            GROUP BY t.id_pacient, m.pret
            HAVING m.pret > (SELECT AVG(pret) FROM medicamente)
        );
  
   CURSOR pacient (v_id_pacient pacienti.id_pacient%TYPE) IS
       SELECT DISTINCT  p.nume, p.prenume
       FROM pacienti p
       JOIN internari i ON i.id_pacient = p.id_pacient
       JOIN sectii_medicale  s on i.id_sectie_m = s.id_sectie_m
       WHERE v_id_pacient = p.id_pacient;
  
   c_id_pacient tratamente.id_pacient%TYPE;
   nume pacienti.nume%TYPE;
   prenume pacienti.prenume%TYPE;
   v_cursor SYS_REFCURSOR;
BEGIN
   OPEN tratament;
   LOOP
       FETCH tratament INTO c_id_pacient;
       EXIT WHEN tratament%NOTFOUND;
      
       OPEN pacient (c_id_pacient);
       LOOP
           FETCH pacient INTO nume, prenume;
           EXIT WHEN pacient%NOTFOUND OR pacient%ROWCOUNT > 3;
           DBMS_OUTPUT.PUT_LINE('pacientul ' || nume || ' ' || prenume );
       END LOOP;
      
       CLOSE pacient;
       DBMS_OUTPUT.PUT_LINE('---------------------------');
   END LOOP;
   CLOSE tratament;
END;
/


BEGIN
afiseaza_pacienti_cu_med_scumpe;
END;
/

--8
CREATE OR REPLACE FUNCTION marire_salariu (
    v_salariu_propus medici.salariu%TYPE, 
    v_id NUMBER
)
RETURN NUMBER IS
    v_result NUMBER := 1; 
    v_salariu medici.salariu%TYPE;
    v_nume medici.nume%TYPE;
    v_nr_pacienti NUMBER;
    
    salariu_invalid  EXCEPTION;

    nr_pacienti_invalid  EXCEPTION;
    
BEGIN
    SELECT m.nume, m.salariu, COUNT(P.ID_PACIENT)
        INTO v_nume, v_salariu, v_nr_pacienti
        FROM medici m
        JOIN consultatii c ON c.id_medic = m.id_medic
        JOIN pacienti p ON p.id_pacient = c.id_pacient
        WHERE v_id = m.id_medic 
        GROUP BY m.nume, m.salariu;
    
    IF v_salariu_propus <= v_salariu THEN
        RAISE salariu_invalid;
    ELSIF v_nr_pacienti < 2 THEN
        RAISE nr_pacienti_invalid;
    ELSE 
        UPDATE MEDICI
        SET salariu = v_salariu_propus
        WHERE id_medic = v_id;
        v_result := 1; -- REZULTAT SUCCES
        DBMS_OUTPUT.PUT_LINE('Update medic: ' || v_nume || ' -- salariu nou: ' || v_salariu_propus || ' -- nr pacienti: ' || v_nr_pacienti);
    END IF;

    RETURN v_result;
EXCEPTION
    WHEN NO_DATA_FOUND THEN 
        DBMS_OUTPUT.PUT_LINE('Medicul nu exista!');
        RAISE_APPLICATION_ERROR(-20003, 'Medicul nu exista!');
        RETURN v_result;
        
    WHEN salariu_invalid THEN 
        DBMS_OUTPUT.PUT_LINE('Salariul propus trebuie sa fie mai mare decat salariul prezent! Deci > ' || v_salariu);
        RETURN v_result;
    
    WHEN nr_pacienti_invalid THEN 
        DBMS_OUTPUT.PUT_LINE('Medicul propus are un pacient, nu satisface conditiile de marire salariu!');
        RETURN v_result;
     
END marire_salariu;
/

--apel functie
DECLARE
    v_no_data NUMBER;
    v_success NUMBER;
    v_success1 NUMBER;
    v_success2 NUMBER;  
BEGIN

    --Medicul propus are doar un pacient
    v_success1 := marire_salariu(10000, 2);   
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    --Salariul propus trebuie sa fie mai mare decat salariul prezent
    v_success := marire_salariu(1000, 2);
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    --Apelare cu success, marirea salariului
    v_success2 := marire_salariu(100000, 1);
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    --Medicul propus nu exista
    v_no_data := marire_salariu(10,2333);
END;
/

-----------------

--9

CREATE OR REPLACE PROCEDURE verifica_pacienti_medicamente
(v_nume_medicament medicamente.nume%TYPE)
AS
    count_id NUMBER:=0;
    v_id NUMBER;
    v_nume pacienti.nume%TYPE;
    v_pret_med medicamente.pret%TYPE;
    v_nume_med medicamente.nume%TYPE;
    v_sectie_m sectii_medicale.nume_sectie%TYPE;

BEGIN
    
    SELECT distinct p.id_pacient, p.nume, m.pret, m.nume, sm.nume_sectie
    INTO v_id, v_nume, v_pret_med, v_nume_med, v_sectie_m
    FROM PACIENTI P
    
    JOIN CONSULTATII C ON C.ID_PACIENT = P.ID_PACIENT
    JOIN TRATAMENTE T ON T.ID_PACIENT = C.ID_PACIENT
    JOIN TRATAMENTE_CONTIN_MEDICAMENTE TCM ON TCM.ID_TRATAMENT = T.ID_TRATAMENT
    JOIN MEDICAMENTE M ON M.ID_MEDICAMENT = TCM.ID_MEDICAMENT
    JOIN INTERNARI I ON I.ID_PACIENT = P.ID_PACIENT
    JOIN SECTII_MEDICALE SM ON SM.ID_SECTIE_M = I.ID_SECTIE_M
    
    WHERE m.nume = v_nume_medicament
    GROUP BY p.id_pacient, p.nume, m.pret, m.nume, sm.nume_sectie
    HAVING m.pret > (SELECT AVG(pret) 
                     FROM medicamente);
    
    DBMS_OUTPUT.PUT_LINE('PACIENTUL: ' || v_nume || ' --> internat in sectia: ' || v_sectie_m);
    DBMS_OUTPUT.PUT_LINE('MEDICAMENT: ' || v_nume_med || ' ->  pret: ' || v_pret_med);
EXCEPTION
        WHEN NO_DATA_FOUND THEN 
            DBMS_OUTPUT.PUT_LINE('Nu exista Pacienti care consuma acest medicament!');
        WHEN TOO_MANY_ROWS THEN 
            DBMS_OUTPUT.PUT_LINE('Mai multi pacienti folosesc acest medicament!');
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('Alta eroare!');
END verifica_pacienti_medicamente;
/

DECLARE  
    v_nume_medicament_no_data_found medicamente.nume%TYPE := 'Ranitidină'; 
    v_nume_medicament_too_many_rows medicamente.nume%TYPE := 'Tramadol'; -- LA FEL Tramadol
    v_nume_medicament_no_err medicamente.nume%TYPE := 'Losartan'; --Amoxicilină
BEGIN
    verifica_pacienti_medicamente(v_nume_medicament_no_data_found);
    DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------------------------------ ');
    verifica_pacienti_medicamente(v_nume_medicament_too_many_rows);
    DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------------------------------ ');
    verifica_pacienti_medicamente(v_nume_medicament_no_err);
END;
/




--10
--la nivel de linie
CREATE OR REPLACE PROCEDURE MODIFIC_NR_PATURI_LIBERE
    (v_id_sec sectii_medicale.id_sectie_m%TYPE, operatie NUMBER) AS
BEGIN
    UPDATE sectii_medicale
    SET NR_PATURI_LIBERE = NVL(NR_PATURI_LIBERE, 0) + operatie
    WHERE id_sectie_m = v_id_sec;
END;
/

CREATE OR REPLACE TRIGGER trigger_internari
    BEFORE DELETE OR UPDATE OR INSERT OF ID_SECTIE_M ON internari
    FOR EACH ROW
DECLARE 
    exista_paturi SECTII_MEDICALE.NR_PATURI_LIBERE%TYPE;
    nu_exista_paturi_libere EXCEPTION;
BEGIN
    -- am rescris select query deoarece la delete primeam "no data found", nu gasea :OLD.ID_SECTIE_M

    IF DELETING THEN
       SELECT NR_PATURI_LIBERE INTO exista_paturi FROM SECTII_MEDICALE WHERE :OLD.ID_SECTIE_M = ID_SECTIE_M ; 
        -- se sterge o internare
        MODIFIC_NR_PATURI_LIBERE(:OLD.ID_SECTIE_M, 1);
        
    ELSIF UPDATING THEN
        --SE MODIFICA SECTIA UNEI INTERNARI
        SELECT NR_PATURI_LIBERE INTO exista_paturi FROM SECTII_MEDICALE WHERE :NEW.ID_SECTIE_M = ID_SECTIE_M ;
        
        MODIFIC_NR_PATURI_LIBERE(:OLD.ID_SECTIE_M, 1);
        
        IF exista_paturi = 0 
            THEN RAISE nu_exista_paturi_libere;
        MODIFIC_NR_PATURI_LIBERE(:NEW.ID_SECTIE_M, -1);
        END IF;
        
    ELSE
        --SE INTRODUCE O INTERNARE
        SELECT NR_PATURI_LIBERE INTO exista_paturi FROM SECTII_MEDICALE WHERE :NEW.ID_SECTIE_M = ID_SECTIE_M ;
        
        IF exista_paturi = 0 
            THEN RAISE nu_exista_paturi_libere;
        ELSE 
            MODIFIC_NR_PATURI_LIBERE(:NEW.ID_SECTIE_M, -1);
        END IF;
    END IF;
EXCEPTION
    WHEN nu_exista_paturi_libere THEN
       RAISE_APPLICATION_ERROR(-20002,'NU MAI EXISTA PATURI!'); 
END;
/

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (3, 'SEC4', TO_DATE('2023-05-29', 'YYYY-MM-DD'));

INSERT INTO INTERNARI (ID_PACIENT, ID_SECTIE_M, DATA_INTERNARE)
VALUES (6, 'SEC4', TO_DATE('2023-05-29', 'YYYY-MM-DD'));

UPDATE INTERNARI
SET ID_SECTIE_M = 'SEC4' 
WHERE id_pacient = 3 AND TO_DATE(DATA_INTERNARE) = TO_DATE('2023-MAY-29', 'YYYY-MM-DD');

DELETE FROM INTERNARI
WHERE INTERNARI.id_pacient = 5
  AND INTERNARI.ID_SECTIE_M = 'SEC4'
  AND TO_DATE(DATA_INTERNARE, 'DD-MM-YYYY') = TO_DATE('25-SEP-23', 'DD-MM-YYYY');
  
SELECT * FROM SECTII_MEDICALE;
SELECT * FROM internari;
DROP TRIGGER trigger_internari;


--11
CREATE OR REPLACE TRIGGER gestioneaza_nr_internari
    BEFORE INSERT ON internari
DECLARE
    v_internari NUMBER;
    v_medici NUMBER;
BEGIN 

    SELECT DISTINCT COUNT(*)
    INTO v_medici
    FROM medici;
    
    SELECT DISTINCT COUNT(id_pacient)
    INTO v_internari
    FROM INTERNARI;
    
    v_medici := v_medici * 3;
    
    IF v_internari > v_medici THEN
    RAISE_APPLICATION_ERROR(-20001,'Ati depasit numarul maxim de internari!'); 
    END IF;
END;
/

BEGIN
    FOR j in 10..30 LOOP
        INSERT INTO INTERNARI VALUES (1, 'SEC2', TO_DATE(('2023-10-' || j), 'YYYY-MM-DD'));
    END LOOP;
END;
/
drop trigger gestioneaza_nr_internari;

--12

-- trigger LDD - system
CREATE TABLE audit_trigger
(utilizator VARCHAR2(30),
 nume_bd VARCHAR2(50),
 eveniment VARCHAR2(20),
 nume_obiect VARCHAR2(30),
 data DATE);

CREATE OR REPLACE TRIGGER gestionare_modificari_ldd
  AFTER CREATE OR DROP OR ALTER ON SCHEMA
BEGIN
  IF 'PROIECT' != USER 
  THEN 
    RAISE_APPLICATION_ERROR(-20900, 'Aveti voie sa faceti modificari doar din contul <<PROIECT>>');
  END IF;
  INSERT INTO audit_trigger
  VALUES (SYS.LOGIN_USER, SYS.DATABASE_NAME, SYS.SYSEVENT, SYS.DICTIONARY_OBJ_NAME, SYSDATE);
END; 
/
--testing
alter table consultatii add test varchar2(10);
alter table consultatii add test2 varchar2(10);
alter table consultatii drop column test2;

SELECT * FROM audit_trigger;
DROP TRIGGER gestionare_modificari_ldd;
drop table audit_trigger;

--13
CREATE OR REPLACE PACKAGE proiect_medicare AS
    PROCEDURE evaluare_medici;
    PROCEDURE afiseaza_pacienti_cu_med_scumpe;
    FUNCTION marire_salariu (
    v_salariu_propus medici.salariu%TYPE, 
    v_id NUMBER)
    RETURN NUMBER;
    PROCEDURE MODIFIC_NR_PATURI_LIBERE
    (v_id_sec sectii_medicale.id_sectie_m%TYPE, operatie NUMBER);

END proiect_medicare;
/

CREATE OR REPLACE PACKAGE BODY proiect_medicare AS

--- sarcina 6
    PROCEDURE evaluare_medici AS
        TYPE tablou_idx IS TABLE OF medici%ROWTYPE INDEX BY BINARY_INTEGER;
        TYPE tablou_imbr IS TABLE OF pacienti%ROWTYPE;
        TYPE vector IS VARRAY(3) OF consultatii%ROWTYPE;
    
        med tablou_idx;
        pacienti_med tablou_imbr := tablou_imbr();
        cons_med vector := vector();
    BEGIN
        -- Salvare in tablou
        SELECT ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M 
        BULK COLLECT INTO med
        FROM (
        SELECT COUNT(*) AS NR_CONS, M.ID_MEDIC, M.NUME, M.PRENUME, M.SALARIU, M.MEDIC_SEF, M.ID_SECTIE_M  FROM MEDICI M
            INNER JOIN CONSULTATII C ON C.ID_MEDIC = M.ID_MEDIC
            GROUP BY M.ID_MEDIC, M.ID_MEDIC, M.NUME, M.PRENUME, M.SALARIU, M.MEDIC_SEF, M.ID_SECTIE_M 
            ORDER BY NR_CONS ASC) T
        WHERE ROWNUM <= 3;
    
        FOR i IN 1..med.COUNT LOOP
            -- Pentru pacienti
            FOR patient_rec IN (
                SELECT pa.* 
                FROM pacienti pa
                INNER JOIN consultatii c ON c.id_pacient = pa.id_pacient
                WHERE c.id_medic = med(i).id_medic
            ) LOOP
                pacienti_med.extend;
                pacienti_med(pacienti_med.last) := patient_rec;
            END LOOP;
    
            -- Pentru consultatii
            FOR cons_rec IN (
                SELECT * 
                FROM consultatii
                WHERE id_medic = med(i).id_medic
            ) LOOP
                cons_med.extend;
                cons_med(cons_med.last) := cons_rec;
            END LOOP;
        END LOOP;
    
        -- Afisare medici
        FOR k IN 1..med.COUNT LOOP
            DBMS_OUTPUT.PUT_LINE('Id medic: ' || med(k).id_medic || ' ' || med(k).nume || ' ' || med(k).prenume);
            DBMS_OUTPUT.PUT_LINE('Consultatii:');
            -- Afisare consultatii pentru fiecare medic
            FOR j IN 1..cons_med.COUNT LOOP
                IF cons_med(j).id_medic = med(k).id_medic THEN
                    DBMS_OUTPUT.PUT_LINE('Data consultatie: ' || cons_med(j).data_cons || ' ');
                    -- Afisare pacienti pentru fiecare consultatie
                    DBMS_OUTPUT.PUT_LINE('Pacient: ');
                    FOR i IN 1..pacienti_med.COUNT LOOP
                        IF cons_med(j).id_pacient = pacienti_med(i).id_pacient THEN
                            DBMS_OUTPUT.PUT_LINE(pacienti_med(i).nume || ' ' || pacienti_med(i).prenume);
                        END IF;
                    END LOOP;
                END IF;
            END LOOP;
            DBMS_OUTPUT.NEW_LINE;
        END LOOP;

    END evaluare_medici;


--- sarcina 7
    PROCEDURE afiseaza_pacienti_cu_med_scumpe IS
       CURSOR tratament IS
            SELECT DISTINCT ID_PACIENT
            FROM (
                SELECT t.id_pacient, m.pret
                FROM tratamente t
                JOIN tratamente_contin_medicamente tcm ON t.id_tratament = tcm.id_tratament
                JOIN medicamente m ON m.id_medicament = tcm.id_medicament
                GROUP BY t.id_pacient, m.pret
                HAVING m.pret > (SELECT AVG(pret) FROM medicamente)
            );
      
       CURSOR pacient (v_id_pacient pacienti.id_pacient%TYPE) IS
           SELECT DISTINCT  p.nume, p.prenume
           FROM pacienti p
           JOIN internari i ON i.id_pacient = p.id_pacient
           JOIN sectii_medicale  s on i.id_sectie_m = s.id_sectie_m
           WHERE v_id_pacient = p.id_pacient;
      
       c_id_pacient tratamente.id_pacient%TYPE;
       nume pacienti.nume%TYPE;
       prenume pacienti.prenume%TYPE;
       v_cursor SYS_REFCURSOR;
    BEGIN
       OPEN tratament;
       LOOP
           FETCH tratament INTO c_id_pacient;
           EXIT WHEN tratament%NOTFOUND;
          
           OPEN pacient (c_id_pacient);
           LOOP
               FETCH pacient INTO nume, prenume;
               EXIT WHEN pacient%NOTFOUND OR pacient%ROWCOUNT > 3;
               DBMS_OUTPUT.PUT_LINE('pacientul ' || nume || ' ' || prenume );
           END LOOP;
          
           CLOSE pacient;
           DBMS_OUTPUT.PUT_LINE('---------------------------');
       END LOOP;
       CLOSE tratament;
    END;
     
    
--- sarcina 8
    FUNCTION marire_salariu (
            v_salariu_propus medici.salariu%TYPE, 
            v_id NUMBER
    )
    RETURN NUMBER IS
        v_result NUMBER := 2; 
        v_salariu medici.salariu%TYPE;
        v_nume medici.nume%TYPE;
        v_nr_pacienti NUMBER;
        
        salariu_invalid  EXCEPTION;
    
        nr_pacienti_invalid  EXCEPTION;
        
    BEGIN
        SELECT m.nume, m.salariu, COUNT(P.ID_PACIENT)
            INTO v_nume, v_salariu, v_nr_pacienti
            FROM medici m
            JOIN consultatii c ON c.id_medic = m.id_medic
            JOIN pacienti p ON p.id_pacient = c.id_pacient
            WHERE v_id = m.id_medic 
            GROUP BY m.nume, m.salariu;
        
        IF v_salariu_propus <= v_salariu THEN
            RAISE salariu_invalid;
        ELSIF v_nr_pacienti < 2 THEN
            RAISE nr_pacienti_invalid;
        ELSE 
            UPDATE MEDICI
            SET salariu = v_salariu_propus
            WHERE id_medic = v_id;
            v_result := 1; -- REZULTAT SUCCES
            DBMS_OUTPUT.PUT_LINE('Update medic: ' || v_nume || ' -- salariu nou: ' || v_salariu_propus || ' -- nr pacienti: ' || v_nr_pacienti);
        END IF;
    
        RETURN v_result;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN 
            DBMS_OUTPUT.PUT_LINE('Medicul nu exista!');
            RAISE_APPLICATION_ERROR(-20003, 'Medicul nu exista!');
            RETURN v_result;
            
        WHEN salariu_invalid THEN 
            DBMS_OUTPUT.PUT_LINE('Salariul propus trebuie sa fie mai mare decat salariul prezent! Deci > ' || v_salariu);
            RETURN v_result;
        
        WHEN nr_pacienti_invalid THEN 
            DBMS_OUTPUT.PUT_LINE('Medicul propus are un pacient, nu satisface conditiile de marire salariu!');
            RETURN v_result;
         
    END marire_salariu;
    
    PROCEDURE MODIFIC_NR_PATURI_LIBERE
    (v_id_sec sectii_medicale.id_sectie_m%TYPE, operatie NUMBER) AS
    BEGIN
        UPDATE sectii_medicale
        SET NR_PATURI_LIBERE = NVL(NR_PATURI_LIBERE, 0) + operatie
        WHERE id_sectie_m = v_id_sec;
    END MODIFIC_NR_PATURI_LIBERE;

END proiect_medicare;
/

--Testare pachet:

--6
execute proiect_medicare.evaluare_medici();

--7
execute proiect_medicare.afiseaza_pacienti_cu_med_scumpe();

-- proc trigger
execute proiect_medicare.MODIFIC_NR_PATURI_LIBERE('SEC2', 1);
-- testez intr-un bloc PLSQL:
DECLARE
    v_salariu_propus medici.salariu%TYPE := 1000; 
    v_id NUMBER := 2;
    v_success NUMBER;
    v_success1 NUMBER;
    v_success2 NUMBER;  --APEL SUCCES
    
BEGIN
    --Medicul propus are doar un pacient
    v_success1 := proiect_medicare.marire_salariu(10000, 2);

    IF v_success1 = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Salariul a fost actualizat cu succes!');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Actualizarea salariului a esuat!');
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    
        --Salariul propus trebuie sa fie mai mare decat salariul prezent
    v_success := proiect_medicare.marire_salariu(v_salariu_propus, v_id);
    IF v_success = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Salariul a fost actualizat cu succes!');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Actualizarea salariului a esuat!');
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    
        
    --Apelare cu success, marirea salariului
    v_success2 := proiect_medicare.marire_salariu(10000, 1);
    IF v_success2 = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Salariul a fost actualizat cu succes!');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Actualizarea salariului a esuat!');
    END IF;
END;
/
--------------

--14
CREATE OR REPLACE PACKAGE pachet_actualizari_medicare AS
    TYPE tablou_imbr IS TABLE OF pacienti%ROWTYPE;
    TYPE tablou_imbricat IS TABLE OF consultatii%ROWTYPE;
    TYPE vector IS VARRAY(3) OF medici%ROWTYPE;
    v_istoric_salariu ISTORIC_SALARIU%ROWTYPE;
    
    med vector;
        
    CURSOR med_cursor IS
        SELECT ID_MEDIC, NUME, PRENUME, SALARIU, MEDIC_SEF, ID_SECTIE_M 
        FROM (
            SELECT COUNT(*) AS NR_CONS, M.ID_MEDIC, M.NUME, M.PRENUME, M.SALARIU, M.MEDIC_SEF, M.ID_SECTIE_M  
            FROM MEDICI M
            INNER JOIN CONSULTATII C ON C.ID_MEDIC = M.ID_MEDIC
            GROUP BY M.ID_MEDIC, M.ID_MEDIC, M.NUME, M.PRENUME, M.SALARIU, M.MEDIC_SEF, M.ID_SECTIE_M 
            ORDER BY NR_CONS DESC
        ) T
        WHERE ROWNUM <= 3;
        

    PROCEDURE initializare_date;

    PROCEDURE afisare_medici;

    FUNCTION creste_salariu(p_salariu NUMBER)
    RETURN NUMBER;

    FUNCTION marire_salariu_pac RETURN NUMBER;

END pachet_actualizari_medicare;
/

CREATE OR REPLACE PACKAGE BODY pachet_actualizari_medicare AS
    pacienti_med tablou_imbr := tablou_imbr();
    cons_med tablou_imbricat := tablou_imbricat();
    
    PROCEDURE initializare_date IS
    BEGIN
        pacienti_med.DELETE;
        cons_med.DELETE;
        
        OPEN med_cursor;
        FETCH med_cursor BULK COLLECT INTO med;
        CLOSE med_cursor;

        FOR i IN 1..med.COUNT LOOP
        -- Pentru pacienti
        FOR patient_rec IN (
            SELECT distinct pa.* 
            FROM pacienti pa
            INNER JOIN consultatii c ON c.id_pacient = pa.id_pacient
            WHERE c.id_medic = med(i).id_medic
        ) LOOP
            pacienti_med.extend;
            pacienti_med(pacienti_med.last) := patient_rec;
        END LOOP;

        -- Pentru consultatii
        FOR cons_rec IN (
            SELECT * 
            FROM consultatii
            WHERE id_medic = med(i).id_medic
        ) LOOP
            cons_med.extend;
            cons_med(cons_med.last) := cons_rec;
        END LOOP;
    END LOOP; 
    
    END initializare_date;
    
    PROCEDURE afisare_medici 
    IS 
    BEGIN
    initializare_date();
        FOR k IN 1..med.COUNT LOOP
            DBMS_OUTPUT.PUT_LINE('------------------------------------------------------');
            DBMS_OUTPUT.PUT_LINE('Id medic: ' || med(k).id_medic || ' ' || med(k).nume || ' ' || med(k).prenume);
            DBMS_OUTPUT.PUT_LINE('Salariu: ' || med(k).salariu);
            DBMS_OUTPUT.PUT_LINE('Consultatii:');
            
            FOR j IN 1..cons_med.COUNT LOOP
                IF cons_med(j).id_medic = med(k).id_medic THEN
                    DBMS_OUTPUT.PUT_LINE('Data consultatie: ' || cons_med(j).data_cons || ' ');
                    DBMS_OUTPUT.PUT_LINE('Pacient: ');
                    
                    FOR i IN 1..pacienti_med.COUNT LOOP
                        IF cons_med(j).id_pacient = pacienti_med(i).id_pacient THEN
                            DBMS_OUTPUT.PUT_LINE(pacienti_med(i).nume || ' ' || pacienti_med(i).prenume);
                        END IF;
                    END LOOP;
                END IF;
            END LOOP;
            
            DBMS_OUTPUT.NEW_LINE;
        END LOOP;
    END afisare_medici;
    
    FUNCTION creste_salariu(p_salariu NUMBER)
    RETURN NUMBER IS
          salariu_crescut NUMBER;
        BEGIN
          salariu_crescut := p_salariu * 1.1; -- Crestere cu 10%
          RETURN salariu_crescut;
    END;

    FUNCTION marire_salariu_pac
    
    RETURN NUMBER IS
        v_result NUMBER := -2; 
        id_nou NUMBER;
    BEGIN     
        initializare_date();
        afisare_medici();
        
        FOR i IN 1..med.COUNT LOOP
            
            SELECT MAX(ID_ISTORIC_SAL) INTO id_nou FROM ISTORIC_SALARIU;
            
            v_istoric_salariu.ID_ISTORIC_SAL := id_nou + i;
            v_istoric_salariu.ID_MEDIC := med(i).id_medic;
            v_istoric_salariu.SALARIU_NOU := creste_salariu(med(i).salariu);
            v_istoric_salariu.SALARIU_VECHI := med(i).salariu;
            v_istoric_salariu.DATA_ACTUALIZARE := SYSDATE;
            
            UPDATE MEDICI
            SET salariu = creste_salariu(salariu)
            WHERE id_medic = med(i).id_medic;
            
            INSERT INTO ISTORIC_SALARIU (ID_ISTORIC_SAL, ID_MEDIC, SALARIU_VECHI, SALARIU_NOU, DATA_ACTUALIZARE)
            VALUES (
                v_istoric_salariu.ID_ISTORIC_SAL,
                v_istoric_salariu.ID_MEDIC,
                v_istoric_salariu.SALARIU_VECHI,
                v_istoric_salariu.SALARIU_NOU,
                v_istoric_salariu.DATA_ACTUALIZARE
            );
            
            v_result := 1; -- REZULTAT SUCCES
        END LOOP;
            
        RETURN v_result;
         
    END marire_salariu_pac;
    
END pachet_actualizari_medicare;
/

--utilizare pachet
DECLARE
    v_success NUMBER;   
BEGIN

    v_success := pachet_actualizari_medicare.marire_salariu_pac();

    IF v_success = 1 THEN
        DBMS_OUTPUT.PUT_LINE('Actualizare cu succes!');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Actualizarea a esuat!');
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    
END;
/
select * from istoric_salariu;
